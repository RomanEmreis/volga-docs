import{_ as s,c as a,a as e,o as t}from"./app-58ZWfUWR.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="custom-handling-of-head-options-and-trace-methods" tabindex="-1"><a class="header-anchor" href="#custom-handling-of-head-options-and-trace-methods"><span>Custom Handling of HEAD, OPTIONS, and TRACE Methods</span></a></h1><p>Implementing HTTP methods such as <code>HEAD</code>, <code>OPTIONS</code>, and <code>TRACE</code> with the Volga can be streamlined using well-defined steps. This guide presents effective ways to handle these methods in your Volga application.</p><h2 id="head-method" tabindex="-1"><a class="header-anchor" href="#head-method"><span>HEAD Method</span></a></h2><p>By default, when you map a handler to the <code>GET</code> method, Volga also maps it to the <code>HEAD</code> method. The <code>HEAD</code> method will return the headers without the body.</p><p>To customize the behavior for the <code>HEAD</code> method, explicitly define it using the <a href="https://docs.rs/volga/latest/volga/app/router/trait.Router.html#tymethod.map_head" target="_blank" rel="noopener noreferrer"><code>map_head</code></a> method:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// HEAD /resource</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_head</span><span class="token punctuation">(</span><span class="token string">&quot;/resource&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;x-custom-header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;some-value-get&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// GET /resource</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/resource&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;x-custom-header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;some-value-get&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the <code>HEAD</code> method returns headers without a body, often mirroring the headers that a <code>GET</code> request would have returned.</p><h2 id="options-method" tabindex="-1"><a class="header-anchor" href="#options-method"><span>OPTIONS Method</span></a></h2><p>For specifically handling <code>OPTIONS</code> requests, use the <a href="https://docs.rs/volga/latest/volga/app/router/trait.Router.html#tymethod.map_options" target="_blank" rel="noopener noreferrer"><code>map_options</code></a> method to map this HTTP method:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// OPTIONS /resource</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_options</span><span class="token punctuation">(</span><span class="token string">&quot;/resource&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;Allow&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GET, OPTIONS&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// GET /resource</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/resource&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The example above includes the <code>Allow</code> header to indicate supported HTTP methods for the resource. The response body is optional, based on the specific needs of your API.</p><h2 id="trace-method" tabindex="-1"><a class="header-anchor" href="#trace-method"><span>TRACE Method</span></a></h2><p>The <code>TRACE</code> method is useful for debugging, as it enables tracing the request path to the server and returns the request message for diagnostic purposes:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">,</span> stream<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// TRACE /</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_trace</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>req<span class="token punctuation">:</span> <span class="token class-name">HttpRequest</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> boxed_body <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">into_boxed_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">stream!</span><span class="token punctuation">(</span>boxed_body<span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;message/http&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This handler captures the incoming request and sends it back in the response with the appropriate content type.</p><p>You can check th examples here:</p><ul><li><a href="https://github.com/RomanEmreis/volga/blob/main/examples/head_request/src/main.rs" target="_blank" rel="noopener noreferrer">HEAD</a></li><li><a href="https://github.com/RomanEmreis/volga/blob/main/examples/options_request/src/main.rs" target="_blank" rel="noopener noreferrer">OPTIONS</a></li><li><a href="https://github.com/RomanEmreis/volga/blob/main/examples/trace_request/src/main.rs" target="_blank" rel="noopener noreferrer">TRACE</a></li></ul>`,17)]))}const i=s(p,[["render",o]]),u=JSON.parse('{"path":"/advanced/custom-trace-opt-head.html","title":"Custom Handling of HEAD, OPTIONS, and TRACE Methods","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":4},{"name":"RomanEmreis","username":"RomanEmreis","email":"39233213+RomanEmreis@users.noreply.github.com","commits":2,"url":"https://github.com/RomanEmreis"}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"d30713a96f8d059c7fba8aa54431810e4c9b0833","time":1735484928000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update custom-trace-opt-head.md"},{"hash":"f0a26f29858451307785105c897483568f99fc00","time":1734955827000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"8076347a75ba094e0335f358155e665244a06f21","time":1734370202000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update custom-trace-opt-head.md"},{"hash":"d897fb4b0370f9625af441400acca1779015a062","time":1734361671000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"small fix"},{"hash":"7bc27d7af6a3b3ba979653e271bc7eff4c42ca89","time":1734360674000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"advanced/custom-trace-opt-head.md"}');export{i as comp,u as data};
