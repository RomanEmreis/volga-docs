import{_ as t,c as o,a as e,b as a,e as n,d as i,w as l,r as c,o as r}from"./app-58ZWfUWR.js";const u={};function d(m,s){const p=c("RouteLink");return r(),o("div",null,[s[7]||(s[7]=e(`<h1 id="request-decompression" tabindex="-1"><a class="header-anchor" href="#request-decompression"><span>Request Decompression</span></a></h1><p>Similarly to compression, Volga provides a middleware feature that decompresses HTTP request bodies based on the <code>Content-Encoding</code> header. Currently, Volga supports four decompression algorithms: <a href="https://en.wikipedia.org/wiki/Brotli" target="_blank" rel="noopener noreferrer">Brotli</a>, <a href="https://en.wikipedia.org/wiki/Gzip" target="_blank" rel="noopener noreferrer">Gzip</a>, <a href="https://en.wikipedia.org/wiki/Deflate" target="_blank" rel="noopener noreferrer">Deflate</a>, and <a href="https://en.wikipedia.org/wiki/Zstd" target="_blank" rel="noopener noreferrer">Zstandard</a>.</p><h2 id="enabling-decompression" tabindex="-1"><a class="header-anchor" href="#enabling-decompression"><span>Enabling Decompression</span></a></h2><p>To enable request decompression, ensure you include the necessary feature in your <code>Cargo.toml</code>. If you&#39;re not using the <code>full</code> feature set, enable the <code>decompression-full</code> feature as follows:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.6&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;decompression-full&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you only need specific decompression algorithms, specify them explicitly:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.6&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;decompression-brotli&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;decompression-gzip&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example-of-usage" tabindex="-1"><a class="header-anchor" href="#example-of-usage"><span>Example of usage</span></a></h2><p>To use decompression in your application, call the <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.use_decompression" target="_blank" rel="noopener noreferrer"><code>use_decompression()</code></a> method in your <code>main.rs</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">Json</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token attribute attr-name">#[derive(Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">i32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Enable request body decompression middleware</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use_decompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token class-name">Json</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Json</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;&gt;</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[s[1]||(s[1]=n("Then you can test it with ")),s[2]||(s[2]=a("code",null,"curl",-1)),s[3]||(s[3]=n(" command after creating and packing the ")),s[4]||(s[4]=a("code",null,"users.json.gz",-1)),s[5]||(s[5]=n(" file which you can make from the response of the Response Compressions topic's ")),i(p,{to:"/getting-started/compression.html#example-of-usage"},{default:l(()=>s[0]||(s[0]=[n("example")])),_:1,__:[0]}),s[6]||(s[6]=n(":"))]),s[8]||(s[8]=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--location</span> <span class="token string">&#39;http://127.0.0.1:7878/users&#39;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Encoding: gzip&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--compressed</span> <span class="token punctuation">\\</span></span>
<span class="line">    --data-binary users.json.gz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it works</span></a></h2><p>When a request is received, the decompression middleware checks the <code>Content-Encoding</code> HTTP header to determine the compression algorithm, wrap the request body in an appropriate decompression stream and removes the <code>Content-Encoding</code> HTTP header, indicating that the request body is no longer compressed. If the <code>Content-Encoding</code> header is not provided middleware ignores this request and leaves the body as is.</p><p>If the <code>Content-Encoding</code> header specifies an unsupported algorithm, the middleware responds with a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/415" target="_blank" rel="noopener noreferrer"><code>415 Unsupported Media Type</code></a> status code.</p><p>Here is the <a href="https://github.com/RomanEmreis/volga/blob/main/examples/decompression/src/main.rs" target="_blank" rel="noopener noreferrer">full example</a></p>`,5))])}const v=t(u,[["render",d]]),h=JSON.parse('{"path":"/advanced/decompression.html","title":"Request Decompression","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":3}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"4f7f9ff06d3bde58f86db888ba4137ed278316d4","time":1736519946000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"advanced/decompression.md"}');export{v as comp,h as data};
