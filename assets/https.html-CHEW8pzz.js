import{_ as n,c as a,a as e,o as t}from"./app-58ZWfUWR.js";const p={};function o(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>HTTPS</span></a></h1><p>Volga supports HTTPS/TLS protocols implemented on top of <code>rustls</code>.</p><p>If you&#39;re not using the <code>full</code> feature set, ensure you enable the <code>tls</code> feature in your <code>Cargo.toml</code>:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.8&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;tls&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="simple-https-server" tabindex="-1"><a class="header-anchor" href="#simple-https-server"><span>Simple HTTPS server</span></a></h2><h3 id="generate-self-signed-certificates" tabindex="-1"><a class="header-anchor" href="#generate-self-signed-certificates"><span>Generate Self-Signed Certificates</span></a></h3><p>First of all, you need to generate a certificate and private key. For testing purposes, you can use the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-newkey</span> rsa:4096 <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-keyout</span> key.pem <span class="token parameter variable">-out</span> cert.pem <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-subj</span> <span class="token string">&#39;/CN=localhost&#39;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="adjusting-code-to-use-certificate-and-private-key" tabindex="-1"><a class="header-anchor" href="#adjusting-code-to-use-certificate-and-private-key"><span>Adjusting code to use certificate and private key</span></a></h3><p>If you generated a certificate and private key in the folder where your <code>Cargo.toml</code> is located, you can simply do the following:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">tls<span class="token punctuation">::</span></span><span class="token class-name">TlsConfig</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">set_tls</span><span class="token punctuation">(</span><span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, <a href="https://docs.rs/volga/latest/volga/tls/struct.TlsConfig.html" target="_blank" rel="noopener noreferrer"><code>TlsConfig</code></a> reads these files from this folder and expects the names: <code>cert.pem</code> and <code>key.pem</code>. If you have these files in another folder you can configure the TLS like this:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">from_pem</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In the case, if you have different file names, you can handle it like this:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_cert_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.pem&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_key_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can test the code above by using <code>curl</code> command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;</span> <span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token string">&quot;https://localhost:7878/hello&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="client-authentication" tabindex="-1"><a class="header-anchor" href="#client-authentication"><span>Client Authentication</span></a></h2><p>For the code above the client authentication is disabled. You may enable it as optional or required. The difference is that in the first case, it still allows anonymous requests.</p><h3 id="generate-ca-certificate-and-private-key" tabindex="-1"><a class="header-anchor" href="#generate-ca-certificate-and-private-key"><span>Generate CA Certificate and Private Key</span></a></h3><p>First, let&#39;s run the following commands to generate the CA (Client Authority) certificate and private key:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">openssl genrsa <span class="token parameter variable">-out</span> ca.key <span class="token number">2048</span></span>
<span class="line">openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-out</span> ca.pem <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=US/ST=State/L=City/O=Organization/OU=OrgUnit/CN=CA&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="optional-client-authentication" tabindex="-1"><a class="header-anchor" href="#optional-client-authentication"><span>Optional Client Authentication</span></a></h3><p>This configuration will configure trust anchor for optional authentication:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_cert_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.pem&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_key_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.key&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_optional_client_auth</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/ca.pem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required-client-authentication" tabindex="-1"><a class="header-anchor" href="#required-client-authentication"><span>Required Client Authentication</span></a></h3><p>This configuration will configure trust anchor for required authentication:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_cert_path</span><span class="token punctuation">(</span><span class="token string">&quot;tests/tls/server.pem&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_key_path</span><span class="token punctuation">(</span><span class="token string">&quot;tests/tls/server.key&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_required_client_auth</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/ca.pem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you need to generate client certificate and private key:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-newkey</span> rsa:4096 <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-keyout</span> client.key <span class="token parameter variable">-out</span> client.pem <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-subj</span> <span class="token string">&#39;/CN=localhost&#39;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And then you can test it by using <code>curl</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;</span> <span class="token function">curl</span> <span class="token parameter variable">--cert</span> client.pem <span class="token parameter variable">--key</span> client.key <span class="token parameter variable">--cacert</span> ca.pem https://localhost:7878/hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="https-redirection" tabindex="-1"><a class="header-anchor" href="#https-redirection"><span>HTTPS Redirection</span></a></h2><p>Volga also supports an HTTPS redirection, that allows you to configure a redirect from an HTTP request to HTTPS. You can configure it by leveraging <a href="https://docs.rs/volga/latest/volga/tls/struct.TlsConfig.html#method.with_https_redirection" target="_blank" rel="noopener noreferrer"><code>with_https_redirection()</code></a> method:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_cert_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.pem&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_key_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.key&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_https_redirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The default HTTP port is <code>7879</code> but you can change it to any other like this:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">TlsConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_cert_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.pem&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_key_path</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/certs/server.key&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_https_redirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">with_http_port</span><span class="token punctuation">(</span><span class="token number">7979</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, if you run this <code>curl</code> command, your request will be redirected to <code>https://localhost:7878/hello</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;</span> <span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token string">&quot;http://localhost:7979/hello&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Internally, when you run this code in debug mode it uses a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307" target="_blank" rel="noopener noreferrer">Temporary Redirect</a> (307), since link caching can cause unstable behavior in development environments. However, in release mode, it responds with 308 - <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308" target="_blank" rel="noopener noreferrer">Permanent Redirect</a>.</p><h2 id="http-strict-transport-security-protocol-hsts" tabindex="-1"><a class="header-anchor" href="#http-strict-transport-security-protocol-hsts"><span>HTTP Strict Transport Security Protocol (HSTS)</span></a></h2><p>HTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specified by the web server through the use of a response header. When a browser that supports HSTS receives this header:</p><ul><li>The browser stores configuration for the domain that prevents sending any communication over HTTP.</li><li>The browser forces all communication over HTTPS.</li><li>The browser prevents the user from using untrusted or invalid certificates.</li><li>The browser disables prompts that allow a user to temporarily trust such a certificate.</li></ul><p>Because HSTS is enforced by the client, it has some limitations:</p><ul><li>The client should support HSTS.</li><li>HSTS requires at least one successful HTTPS request to establish the HSTS policy.</li><li>The application must check every HTTP request and redirect or reject the HTTP request.</li></ul><p>You can enable HSTS in Volga by leveraging <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.use_hsts" target="_blank" rel="noopener noreferrer"><code>use_hsts()</code></a> method:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">tls<span class="token punctuation">::</span></span><span class="token class-name">TlsConfig</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">with_tls</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>tls<span class="token closure-punctuation punctuation">|</span></span> tls<span class="token punctuation">.</span><span class="token function">with_https_redirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Enables HSTS middleware</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use_hsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then if you run this code you will receive the <code>Strict-Transport-Security</code> HTTP header along with the successful response.</p><p>You can find more examples <a href="https://github.com/RomanEmreis/volga/blob/main/examples/tls/src/main.rs" target="_blank" rel="noopener noreferrer">here</a>.</p>`,49)]))}const l=n(p,[["render",o]]),r=JSON.parse('{"path":"/protocols/https.html","title":"HTTPS","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":4},{"name":"RomanEmreis","username":"RomanEmreis","email":"39233213+RomanEmreis@users.noreply.github.com","commits":1,"url":"https://github.com/RomanEmreis"}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"a867fa2aa5f2803668e59034c5e3f7dfbf34caca","time":1742551187000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"675ae43b5ec0f09744f248db693841d163054584","time":1737136119000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update https.md"},{"hash":"3678209d5aa638c7ad51e1e2e1da418c83f2f491","time":1737133994000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"protocols/https.md"}');export{l as comp,r as data};
