import{_ as t,c as o,a as e,b as a,e as s,d as l,w as i,r as c,o as r}from"./app-58ZWfUWR.js";const u={};function d(m,n){const p=c("RouteLink");return r(),o("div",null,[n[7]||(n[7]=e(`<h1 id="распаковка-запросов" tabindex="-1"><a class="header-anchor" href="#распаковка-запросов"><span>Распаковка запросов</span></a></h1><p>Аналогично сжатию, Волга предоставляет функцию middleware, которая распаковывает тела HTTP-запросов на основе заголовка <code>Content-Encoding</code>. В настоящее время Волга поддерживает четыре алгоритма распаковки: <a href="https://ru.wikipedia.org/wiki/Brotli" target="_blank" rel="noopener noreferrer">Brotli</a>, <a href="https://ru.wikipedia.org/wiki/Gzip" target="_blank" rel="noopener noreferrer">Gzip</a>, <a href="https://ru.wikipedia.org/wiki/Deflate" target="_blank" rel="noopener noreferrer">Deflate</a> и <a href="https://ru.wikipedia.org/wiki/Zstandard" target="_blank" rel="noopener noreferrer">Zstandard</a>.</p><h2 id="включение-распаковки" tabindex="-1"><a class="header-anchor" href="#включение-распаковки"><span>Включение распаковки</span></a></h2><p>Чтобы включить распаковку запросов, убедитесь, что вы включили необходимую функцию в <code>Cargo.toml</code>. Если вы не используете набор функций <code>full</code>, вы можете отдельно подключить функцию <code>decompression-full</code> делающую доступными все алгоритмы распаковки:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.6&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;decompression-full&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Если вам нужны определенные алгоритмы, вы можете указать их явно:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.6&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;decompression-brotli&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;decompression-gzip&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="пример-использования" tabindex="-1"><a class="header-anchor" href="#пример-использования"><span>Пример использования</span></a></h2><p>Чтобы использовать распаковку в вашем приложении, используйте метод <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.use_decompression" target="_blank" rel="noopener noreferrer"><code>use_decompression()</code></a> в вашем <code>main.rs</code>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Подключает middleware распаковывающий запросы</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use_decompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[n[1]||(n[1]=s("Затем вы можете проверить это с помощью команды ")),n[2]||(n[2]=a("code",null,"curl",-1)),n[3]||(n[3]=s(", предварительно создав и упаковав файл ")),n[4]||(n[4]=a("code",null,"users.json.gz",-1)),n[5]||(n[5]=s(", который вы можете сделать из ответа ")),l(p,{to:"/ru/getting-started/compression.html#%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F"},{default:i(()=>n[0]||(n[0]=[s("примера")])),_:1,__:[0]}),n[6]||(n[6]=s(" предыдущей темы: Сжатие ответов:"))]),n[8]||(n[8]=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--location</span> <span class="token string">&#39;http://127.0.0.1:7878/users&#39;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Encoding: gzip&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--compressed</span> <span class="token punctuation">\\</span></span>
<span class="line">    --data-binary users.json.gz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="принцип-работы" tabindex="-1"><a class="header-anchor" href="#принцип-работы"><span>Принцип работы</span></a></h2><p>При получении запроса middleware распаковки проверяет HTTP-заголовок <code>Content-Encoding</code>, чтобы определить алгоритм сжатия, затем обертывает поток тела запроса в соответствующий поток распаковки и удаляет HTTP-заголовок <code>Content-Encoding</code>, указывая, что тело запроса больше не сжато. Если заголовок <code>Content-Encoding</code> не указан, то middleware игнорирует этот запрос и оставляет тело как есть.</p><p>Если заголовок <code>Content-Encoding</code> указывает на неподдерживаемый алгоритм, то middleware отвечает кодом состояния <a href="https://developer.mozilla.org/ru/docs/Web/HTTP/Status/415" target="_blank" rel="noopener noreferrer"><code>415 Unsupported Media Type</code></a>.</p><p>Полный пример можно посмотреть <a href="https://github.com/RomanEmreis/volga/blob/main/examples/decompression/src/main.rs" target="_blank" rel="noopener noreferrer">здесь</a></p>`,5))])}const v=t(u,[["render",d]]),g=JSON.parse('{"path":"/ru/advanced/decompression.html","title":"Распаковка запросов","lang":"ru-RU","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":3}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"4f7f9ff06d3bde58f86db888ba4137ed278316d4","time":1736519946000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"ru/advanced/decompression.md"}');export{v as comp,g as data};
