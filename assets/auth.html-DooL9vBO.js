import{_ as s,c as a,a as p,o as t}from"./app-58ZWfUWR.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="аутентификация-и-авторизация" tabindex="-1"><a class="header-anchor" href="#аутентификация-и-авторизация"><span>Аутентификация и авторизация</span></a></h1><p>Волга предоставляет гибкие инструменты для реализации аутентификации и авторизации в веб-приложениях. Поддерживаются как базовая аутентификация (Basic Auth), так и токены доступа на основе JWT (Bearer Token). Также доступна система контроля доступа по ролям, разрешениям или пользовательским правилам.</p><h2 id="базовая-аутентификация-basic-auth" tabindex="-1"><a class="header-anchor" href="#базовая-аутентификация-basic-auth"><span>Базовая аутентификация (Basic Auth)</span></a></h2><p>Базовая аутентификация — это простой механизм проверки логина и пароля через HTTP-заголовок <code>Authorization: Basic</code>.</p><h3 id="зависимости" tabindex="-1"><a class="header-anchor" href="#зависимости"><span>Зависимости</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.6.1&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;basic-auth&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="пример" tabindex="-1"><a class="header-anchor" href="#пример"><span>Пример</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">HttpResult</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">headers<span class="token punctuation">::</span></span><span class="token constant">WWW_AUTHENTICATE</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">auth<span class="token punctuation">::</span></span><span class="token class-name">Basic</span><span class="token punctuation">,</span></span>
<span class="line">    status<span class="token punctuation">,</span> ok</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/protected&quot;</span><span class="token punctuation">,</span> protected<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">protected</span><span class="token punctuation">(</span>auth<span class="token punctuation">:</span> <span class="token class-name">Basic</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">HttpResult</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>expected_user<span class="token punctuation">,</span> expected_pass<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_credentials_from_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> auth<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>expected_user<span class="token punctuation">,</span> <span class="token operator">&amp;</span>expected_pass<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token string">&quot;Access granted&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">status!</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">&quot;Unauthorized&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token constant">WWW_AUTHENTICATE</span><span class="token punctuation">,</span> <span class="token string">&quot;Basic realm=\\&quot;Restricted area\\&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_credentials_from_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// В реальном приложении читаем данные из БД или хранилища</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Структура <a href="https://docs.rs/volga/latest/volga/auth/basic/struct.Basic.html" target="_blank" rel="noopener noreferrer"><code>Basic</code></a> автоматически извлекает заголовок авторизации и предоставляет методы <a href="https://docs.rs/volga/latest/volga/auth/basic/struct.Basic.html#method.validate" target="_blank" rel="noopener noreferrer"><code>validate()</code></a> и <a href="https://docs.rs/volga/latest/volga/auth/basic/struct.Basic.html#method.validate_base64" target="_blank" rel="noopener noreferrer"><code>validate_base64()</code></a> для проверки логина и пароля.</p><h2 id="аутентификация-через-jwt-bearer-token" tabindex="-1"><a class="header-anchor" href="#аутентификация-через-jwt-bearer-token"><span>Аутентификация через JWT (Bearer Token)</span></a></h2><p>JWT (JSON Web Token) предоставляет расширенные возможности: аутентификацию с данными (claims) и авторизацию по ролям и правам доступа.</p><h3 id="зависимости-1" tabindex="-1"><a class="header-anchor" href="#зависимости-1"><span>Зависимости</span></a></h3><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.6.1&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;jwt-auth-full&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="генерация-токена" tabindex="-1"><a class="header-anchor" href="#генерация-токена"><span>Генерация токена</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">ops<span class="token punctuation">::</span></span><span class="token class-name">Add</span><span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">SystemTime</span><span class="token punctuation">,</span> <span class="token constant">UNIX_EPOCH</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Serialize</span><span class="token punctuation">,</span> <span class="token class-name">Deserialize</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">Json</span><span class="token punctuation">,</span> <span class="token class-name">HttpResult</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">auth<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Claims</span><span class="token punctuation">,</span> <span class="token class-name">BearerTokenService</span><span class="token punctuation">,</span> <span class="token class-name">EncodingKey</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    ok<span class="token punctuation">,</span> status<span class="token punctuation">,</span> bad_request</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> secret <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">&quot;JWT_SECRET&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;JWT_SECRET must be set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">with_bearer_auth</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>auth<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">            auth<span class="token punctuation">.</span><span class="token function">set_encoding_key</span><span class="token punctuation">(</span><span class="token class-name">EncodingKey</span><span class="token punctuation">::</span><span class="token function">from_secret</span><span class="token punctuation">(</span>secret<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_post</span><span class="token punctuation">(</span><span class="token string">&quot;/generate&quot;</span><span class="token punctuation">,</span> generate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">generate</span><span class="token punctuation">(</span>payload<span class="token punctuation">:</span> <span class="token class-name">Json</span><span class="token operator">&lt;</span><span class="token class-name">Payload</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> bts<span class="token punctuation">:</span> <span class="token class-name">BearerTokenService</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">HttpResult</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>client_id <span class="token operator">!=</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">||</span> payload<span class="token punctuation">.</span>client_secret <span class="token operator">!=</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token macro property">status!</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">&quot;Invalid credentials&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> exp <span class="token operator">=</span> <span class="token class-name">SystemTime</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">duration_since</span><span class="token punctuation">(</span><span class="token constant">UNIX_EPOCH</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">as_secs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> claims <span class="token operator">=</span> <span class="token class-name">Claims</span> <span class="token punctuation">{</span></span>
<span class="line">        sub<span class="token punctuation">:</span> <span class="token string">&quot;user@email.com&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        company<span class="token punctuation">:</span> <span class="token string">&quot;Awesome Co.&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        role<span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        exp<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> token <span class="token operator">=</span> bts<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>claims<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token class-name">AuthData</span> <span class="token punctuation">{</span> access_token<span class="token punctuation">:</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Claims, Serialize, Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Claims</span> <span class="token punctuation">{</span></span>
<span class="line">    sub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    company<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    role<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    exp<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Serialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">AuthData</span> <span class="token punctuation">{</span></span>
<span class="line">    access_token<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Payload</span> <span class="token punctuation">{</span></span>
<span class="line">    client_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    client_secret<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="использование-jwt" tabindex="-1"><a class="header-anchor" href="#использование-jwt"><span>Использование JWT</span></a></h3><p>Промежуточное ПО <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.authorize" target="_blank" rel="noopener noreferrer">authorize()</a> предоставляет инструменты для реализации управления доступом на основе ролей или разрешений и может быть определено для отдельного маршрута, группы маршрутов или всего приложения.</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">auth<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Claims</span><span class="token punctuation">,</span> <span class="token class-name">DecodingKey</span><span class="token punctuation">,</span> roles<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> secret <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">var</span><span class="token punctuation">(</span><span class="token string">&quot;JWT_SECRET&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;JWT_SECRET must be set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">with_bearer_auth</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>auth<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">            auth<span class="token punctuation">.</span><span class="token function">set_decoding_key</span><span class="token punctuation">(</span><span class="token class-name">DecodingKey</span><span class="token punctuation">::</span><span class="token function">from_secret</span><span class="token punctuation">(</span>secret<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/me&quot;</span><span class="token punctuation">,</span> me<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">authorize</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Claims</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Hello from protected route&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Claims, Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Claims</span> <span class="token punctuation">{</span></span>
<span class="line">    sub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    company<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    role<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    exp<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Примечание</p><p>Для корректной работы JWT-аутентификации, необходимо использовать один и тот же <code>JWT_SECRET</code> как при генерации токена, так и при его проверке на защищённых маршрутах. Этот секрет используется для подписания токена на этапе генерации и проверки подписи на этапе валидации. Если секреты отличаются - токен будет отклонён как недействительный.</p></div><h2 id="определение-структуры-claims" tabindex="-1"><a class="header-anchor" href="#определение-структуры-claims"><span>Определение структуры Claims</span></a></h2><p>Для удобства <code>jwt-auth-full</code> включает derive-макрос <a href="https://docs.rs/volga/latest/volga/auth/derive.Claims.html" target="_blank" rel="noopener noreferrer"><code>Claims</code></a> для объявления структуры claim&#39;ов. Но вы также можете использовать альтернативные способы:</p><h3 id="макрос-claims" tabindex="-1"><a class="header-anchor" href="#макрос-claims"><span>Макрос <code>claims!</code></span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span>auth<span class="token punctuation">::</span></span>claims<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property">claims!</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[derive(Deserialize)]</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token type-definition class-name">Claims</span> <span class="token punctuation">{</span></span>
<span class="line">        sub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">        role<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">        permissions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ручная-реализация" tabindex="-1"><a class="header-anchor" href="#ручная-реализация"><span>Ручная реализация</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span>auth<span class="token punctuation">::</span></span><span class="token class-name">AuthClaims</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">Claims</span> <span class="token punctuation">{</span></span>
<span class="line">    sub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    role<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    permissions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">AuthClaims</span> <span class="token keyword">for</span> <span class="token class-name">Claims</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">role</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>role<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">permissions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>permissions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="декларативныи-контроль-доступа-с-authorizer" tabindex="-1"><a class="header-anchor" href="#декларативныи-контроль-доступа-с-authorizer"><span>Декларативный контроль доступа с <code>Authorizer</code></span></a></h2><p>Волга предоставляет гибкую систему контроля доступа с помощью <a href="https://docs.rs/volga/latest/volga/auth/authorizer/enum.Authorizer.html" target="_blank" rel="noopener noreferrer"><code>Authorizer</code></a>.</p><p>Вы можете проверять доступ по:</p><ul><li><a href="https://docs.rs/volga/latest/volga/auth/authorizer/fn.role.html" target="_blank" rel="noopener noreferrer"><code>role(&quot;admin&quot;)</code></a> - одной роли.</li><li><a href="https://docs.rs/volga/latest/volga/auth/authorizer/fn.roles.html" target="_blank" rel="noopener noreferrer"><code>roles([&quot;admin&quot;, &quot;user&quot;])</code></a> - по списку ролей.</li><li><a href="https://docs.rs/volga/latest/volga/auth/authorizer/fn.permission.html" target="_blank" rel="noopener noreferrer"><code>permission(&quot;write&quot;)</code></a> - по одному разрешению.</li><li><a href="https://docs.rs/volga/latest/volga/auth/authorizer/fn.permissions.html" target="_blank" rel="noopener noreferrer"><code>permissions([&quot;read&quot;, &quot;write&quot;])</code></a> - по списку разрешений.</li><li><a href="https://docs.rs/volga/latest/volga/auth/authorizer/fn.predicate.html" target="_blank" rel="noopener noreferrer"><code>predicate(|claims| ...)</code></a> - кастомная логика.</li></ul><h3 id="пример-1" tabindex="-1"><a class="header-anchor" href="#пример-1"><span>Пример</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span>auth<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AuthClaims</span><span class="token punctuation">,</span> role<span class="token punctuation">,</span> roles<span class="token punctuation">,</span> permission<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> predicate<span class="token punctuation">,</span> <span class="token class-name">Authorizer</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">MyClaims</span> <span class="token punctuation">{</span></span>
<span class="line">    role<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    permissions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">impl</span> <span class="token class-name">AuthClaims</span> <span class="token keyword">for</span> <span class="token class-name">MyClaims</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">role</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>role<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">permissions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>permissions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> editors <span class="token operator">=</span> <span class="token function">roles</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;editor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;contributor&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> can_write <span class="token operator">=</span> <span class="token function">permission</span><span class="token punctuation">(</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> access_policy <span class="token operator">=</span> admin<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>editors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>can_write<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">MyClaims</span> <span class="token punctuation">{</span></span>
<span class="line">        role<span class="token punctuation">:</span> <span class="token string">&quot;editor&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        permissions<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">assert!</span><span class="token punctuation">(</span>access_policy<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Совет</p><p>Вы также можете объединять правила в цепочку с помощью комбинаторов <a href="https://docs.rs/volga/latest/volga/auth/authorizer/enum.Authorizer.html#method.and" target="_blank" rel="noopener noreferrer"><code>and()</code></a> и <a href="https://docs.rs/volga/latest/volga/auth/authorizer/enum.Authorizer.html#method.or" target="_blank" rel="noopener noreferrer"><code>or()</code></a> для создания комплексных правил.</p></div><h2 id="примеры" tabindex="-1"><a class="header-anchor" href="#примеры"><span>Примеры</span></a></h2><ul><li><a href="https://github.com/RomanEmreis/volga/blob/main/examples/cookies/src/main.rs" target="_blank" rel="noopener noreferrer">Basic Auth</a></li><li><a href="https://github.com/RomanEmreis/volga/blob/main/examples/jwt/src/main.rs" target="_blank" rel="noopener noreferrer">JWT</a></li></ul>`,34)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/ru/advanced/auth.html","title":"Аутентификация и авторизация","lang":"ru-RU","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"r.emreis@outlook.com","commits":1}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"ru/advanced/auth.md"}');export{i as comp,u as data};
