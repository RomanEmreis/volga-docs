import{_ as s,c as a,a as t,o as p}from"./app-58ZWfUWR.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="внедрение-зависимостеи" tabindex="-1"><a class="header-anchor" href="#внедрение-зависимостеи"><span>Внедрение Зависимостей</span></a></h1><p>Волга поддерживает мощный механизм внедрения зависимостей (Dependency Injection, DI) с тремя жизненными циклами: <strong>Singleton</strong>, <strong>Scoped</strong> и <strong>Transient</strong>.</p><p>Если вы не используете функцию <code>full</code>, то, включите функцию <code>di</code>, либо переключитесь на <code>full</code> в вашем <code>Cargo.toml</code>:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.4.5&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;di&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="жизненные-циклы-зависимостеи" tabindex="-1"><a class="header-anchor" href="#жизненные-циклы-зависимостеи"><span>Жизненные циклы зависимостей</span></a></h2><h3 id="singleton" tabindex="-1"><a class="header-anchor" href="#singleton"><span>Singleton</span></a></h3><p><strong>Singleton</strong> обеспечивает создание и использование единственного экземпляра зависимости на протяжении всего жизненного цикла вашего веб-приложения. Этот экземпляр потокобезопасен и может использоваться одновременно в разных обработчиках.</p><h4 id="пример-singleton" tabindex="-1"><a class="header-anchor" href="#пример-singleton"><span>Пример: Singleton</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">di<span class="token punctuation">::</span></span><span class="token class-name">Dc</span><span class="token punctuation">,</span> ok<span class="token punctuation">,</span> not_found<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token namespace">collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone, Default)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">InMemoryCache</span> <span class="token punctuation">{</span></span>
<span class="line">    inner<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Регистрация Singleton-сервиса</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">add_singleton</span><span class="token punctuation">(</span><span class="token class-name">InMemoryCache</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Использование общего экземпляра в обработчиках маршрутов</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token class-name">Dc</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> user <span class="token operator">=</span> cache<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">match</span> user <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Some</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">ok!</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">not_found!</span><span class="token punctuation">(</span><span class="token string">&quot;Пользователь не найден&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_post</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}/{name}&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token class-name">Dc</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        cache<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>В этом примере:</p><ul><li>Метод <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.add_singleton" target="_blank" rel="noopener noreferrer"><code>add_singleton</code></a> регистрирует <code>InMemoryCache</code> как Singleton.</li><li>Экстрактор <a href="https://docs.rs/volga/latest/volga/di/dc/struct.Dc.html" target="_blank" rel="noopener noreferrer"><code>Dc&lt;T&gt;</code></a> разрешает зависимости по мере необходимости.</li><li><a href="https://docs.rs/volga/latest/volga/di/dc/struct.Dc.html" target="_blank" rel="noopener noreferrer"><code>Dc&lt;T&gt;</code></a> работает аналогично другим экстракторам, таким как <a href="https://docs.rs/volga/latest/volga/http/endpoints/args/json/struct.Json.html" target="_blank" rel="noopener noreferrer"><code>Json&lt;T&gt;</code></a> или <a href="https://docs.rs/volga/latest/volga/http/endpoints/args/query/struct.Query.html" target="_blank" rel="noopener noreferrer"><code>Query&lt;T&gt;</code></a>.</li></ul><div class="hint-container info"><p class="hint-container-title">Инфо</p><p>Тип <code>T</code> должен реализовывать типажи <a href="https://doc.rust-lang.org/std/marker/trait.Send.html" target="_blank" rel="noopener noreferrer"><code>Send</code></a>, <a href="https://doc.rust-lang.org/std/marker/trait.Sync.html" target="_blank" rel="noopener noreferrer"><code>Sync</code></a> и либо <a href="https://doc.rust-lang.org/std/default/trait.Default.html" target="_blank" rel="noopener noreferrer"><code>Default</code></a> или <a href="https://docs.rs/volga/latest/volga/di/derive.Singleton.html" target="_blank" rel="noopener noreferrer"><code>Singleton</code></a>, если он не зависит от других объектов или используется готовый экземпляр.</p></div><h3 id="scoped" tabindex="-1"><a class="header-anchor" href="#scoped"><span>Scoped</span></a></h3><p><strong>Scoped</strong> зависимость создает новый экземпляр для каждого HTTP-запроса. Экземпляр существует только в течение обработки запроса, обеспечивая изоляцию между запросами.</p><h4 id="пример-scoped" tabindex="-1"><a class="header-anchor" href="#пример-scoped"><span>Пример: Scoped</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">di<span class="token punctuation">::</span></span><span class="token class-name">Dc</span><span class="token punctuation">,</span> ok<span class="token punctuation">,</span> not_found<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token namespace">collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Clone, Default)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">InMemoryCache</span> <span class="token punctuation">{</span></span>
<span class="line">    inner<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Регистрация Scoped-сервиса</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">add_scoped</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Использование отдельного экземпляра для каждого запроса</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token class-name">Dc</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> user <span class="token operator">=</span> cache<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">match</span> user <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Some</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">ok!</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">not_found!</span><span class="token punctuation">(</span><span class="token string">&quot;Пользователь не найден&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_post</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}/{name}&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token class-name">Dc</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        cache<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Основные отличия от Singleton:</p><ul><li>Метод <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.add_scoped" target="_blank" rel="noopener noreferrer"><code>add_scoped::&lt;T&gt;()</code></a> регистрирует зависимость, которая создается для каждого HTTP-запроса.</li><li>Каждый запрос имеет свой уникальный экземпляр <code>InMemoryCache</code>.</li></ul><h3 id="transient" tabindex="-1"><a class="header-anchor" href="#transient"><span>Transient</span></a></h3><p><strong>Transient</strong> зависимость создает новый экземпляр при каждом запросе к контейнеру, независимо от контекста или запроса. Регистрация осуществляется с помощью метода <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.add_transient" target="_blank" rel="noopener noreferrer"><code>add_transient::&lt;T&gt;()</code></a>. Поведение похоже на Scoped, но экземпляр создается при каждом внедрении зависимости.</p><div class="hint-container tip"><p class="hint-container-title">Совет</p><p>Реализуя <a href="https://doc.rust-lang.org/std/default/trait.Default.html" target="_blank" rel="noopener noreferrer"><code>Default</code></a> вручную, вы можете управлять поведением создания экземпляров для <strong>Scoped</strong> и <strong>Transient</strong> зависимостей, а для более сложных сценариев используйте типаж <a href="https://docs.rs/volga/latest/volga/di/inject/trait.Inject.html" target="_blank" rel="noopener noreferrer"><code>Inject</code></a>.</p></div><h2 id="использование-di-в-middleware" tabindex="-1"><a class="header-anchor" href="#использование-di-в-middleware"><span>Использование DI в middleware</span></a></h2><p>Чтобы внедрить зависимость в middleware, в случае использования <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.with" target="_blank" rel="noopener noreferrer"><code>with()</code></a> можно воспользоваться структурой <a href="https://docs.rs/volga/latest/volga/di/dc/struct.Dc.html" target="_blank" rel="noopener noreferrer"><code>Dc</code></a> аналогично использованию в обработчиках запросов. Для <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.wrap" target="_blank" rel="noopener noreferrer"><code>wrap()</code></a> используйте метод <a href="https://docs.rs/volga/latest/volga/middleware/http_context/struct.HttpContext.html#method.resolve" target="_blank" rel="noopener noreferrer"><code>resolve::&lt;T&gt;()</code></a>, либо <a href="https://docs.rs/volga/latest/volga/middleware/http_context/struct.HttpContext.html#method.resolve_shared" target="_blank" rel="noopener noreferrer"><code>resolve_shared::&lt;T&gt;</code></a> структуры <a href="https://docs.rs/volga/latest/volga/middleware/http_context/struct.HttpContext.html" target="_blank" rel="noopener noreferrer"><code>HttpContext</code></a>. Основное различие между ними заключается в том, что первый метод требует реализации типажа <a href="https://doc.rust-lang.org/std/clone/trait.Clone.html" target="_blank" rel="noopener noreferrer"><code>Clone</code></a> для <code>T</code>, тогда как последний просто возвращает <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html" target="_blank" rel="noopener noreferrer"><code>Arc&lt;T&gt;</code></a>.</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token comment">// Пример .wrap()</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>ctx<span class="token punctuation">:</span> <span class="token class-name">HttpContext</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">NextFn</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> cache <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Выполнить действия...</span></span>
<span class="line">    <span class="token function">next</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Пример .with()</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>cache<span class="token punctuation">:</span> <span class="token class-name">Dc</span><span class="token operator">&lt;</span><span class="token class-name">InMemoryCache</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">Next</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Выполнить действия...</span></span>
<span class="line">    next<span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="итог" tabindex="-1"><a class="header-anchor" href="#итог"><span>Итог</span></a></h2><ul><li><strong>Singleton</strong>: Общий экземпляр на весь жизненный цикл приложения.</li><li><strong>Scoped</strong>: Новый экземпляр для каждого HTTP-запроса.</li><li><strong>Transient</strong>: Новый экземпляр при каждом запросе к контейнеру.</li></ul><p>Более сложные примеры можно найти <a href="https://github.com/RomanEmreis/volga/blob/main/examples/dependency_injection/src/main.rs" target="_blank" rel="noopener noreferrer">здесь</a>.</p>`,27)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/ru/advanced/di.html","title":"Внедрение Зависимостей","lang":"ru-RU","frontmatter":{},"git":{"updatedTime":1754484873000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":8}],"changelog":[{"hash":"7bb0677408d7e8379e58bed0b9dd01c3710951f7","time":1754484873000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"small updates"},{"hash":"76131e95c3a69f32cfa291d4fe0dac9face66799","time":1754484205000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"updated di page"},{"hash":"b171c253d6071cf479d4fc26ab4d9034eab14952","time":1754483812000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"33d18f8e566f0aed49694c2028630baa7c621f59","time":1737642943000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"5d6cdc2c818f56d2f0f360e08643446a9e8c2e1f","time":1736868027000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"6246a39616ca458e3024eb70c407b4da2234fd60","time":1735471106000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"ru localization"}]},"filePathRelative":"ru/advanced/di.md"}');export{i as comp,u as data};
