import{_ as n,c as a,a as e,o as t}from"./app-58ZWfUWR.js";const p={};function o(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="server-sent-events-sse" tabindex="-1"><a class="header-anchor" href="#server-sent-events-sse"><span>Server-Sent Events (SSE)</span></a></h1><p>Volga includes built-in support for <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events" target="_blank" rel="noopener noreferrer">Server-Sent Events (SSE)</a>, allowing you to implement real-time, one-way communication from the server to the client in your web applications. This feature is available by default and is compatible with both HTTP/1 and HTTP/2 protocols.</p><h2 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic Usage</span></a></h2><p>The example below demonstrates how to create a simple SSE endpoint. It maps a <code>GET</code> request to <code>/events</code>, sets the <code>text/event-stream</code> content type, and continuously sends the message <code>&quot;Hello, world!&quot;</code> once per second until the client disconnects:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token namespace">http<span class="token punctuation">::</span>sse<span class="token punctuation">::</span></span><span class="token class-name">Message</span><span class="token punctuation">,</span> sse<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">futures_util<span class="token punctuation">::</span>stream<span class="token punctuation">::</span></span>repeat_with<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">tokio_stream<span class="token punctuation">::</span></span><span class="token class-name">StreamExt</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/events&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Create a stream of messages sent every second</span></span>
<span class="line">        <span class="token keyword">let</span> stream <span class="token operator">=</span> <span class="token function">repeat_with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Ok</span><span class="token punctuation">::</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token macro property">sse!</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customizing-messages" tabindex="-1"><a class="header-anchor" href="#customizing-messages"><span>Customizing Messages</span></a></h2><p>Volga provides the <a href="https://docs.rs/volga/latest/volga/http/endpoints/args/sse/struct.Message.html" target="_blank" rel="noopener noreferrer"><code>Message</code></a> struct to help you build and customize SSE messages.</p><p>For simple text messages, use the <a href="https://docs.rs/volga/latest/volga/http/endpoints/args/sse/struct.Message.html#method.data" target="_blank" rel="noopener noreferrer"><code>data()</code></a> method as shown above. If you need to send structured data, such as JSON, use the <a href="https://docs.rs/volga/latest/volga/http/endpoints/args/sse/struct.Message.html#method.json" target="_blank" rel="noopener noreferrer"><code>json()</code></a> method, which accepts any type that implements the <a href="https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html" target="_blank" rel="noopener noreferrer"><code>serde::Serialize</code></a> trait:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span>http<span class="token punctuation">::</span>sse<span class="token punctuation">::</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Serialize</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[derive(Serialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">SseData</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> payload <span class="token operator">=</span> <span class="token class-name">SseData</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to setting the message data, the <code>Message</code> builder also supports customization of the event name, ID, comments, and client reconnection retry interval. For details on the SSE message format, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format" target="_blank" rel="noopener noreferrer">MDN&#39;s guide</a>.</p><p>You may also find a full example <a href="https://github.com/RomanEmreis/volga/blob/main/examples/sse/src/main.rs" target="_blank" rel="noopener noreferrer">here</a>.</p>`,11)]))}const i=n(p,[["render",o]]),u=JSON.parse('{"path":"/data/sse.html","title":"Server-Sent Events (SSE)","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":2}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"be45b5b78d0d2925cbe8628c96fe06acf0d952b4","time":1744624313000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"data/sse.md"}');export{i as comp,u as data};
