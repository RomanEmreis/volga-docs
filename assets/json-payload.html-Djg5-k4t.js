import{_ as t,c as o,a as e,b as n,e as a,d as l,w as c,r as i,o as u}from"./app-58ZWfUWR.js";const r={},d={class:"hint-container tip"};function m(k,s){const p=i("RouteLink");return u(),o("div",null,[s[5]||(s[5]=e(`<h1 id="handling-json" tabindex="-1"><a class="header-anchor" href="#handling-json"><span>Handling JSON</span></a></h1><p>Volga simplifies the process of dealing with JSON data in your web applications, both for ingesting incoming JSON payloads in requests and sending JSON responses.</p><h2 id="receiving-json-data" tabindex="-1"><a class="header-anchor" href="#receiving-json-data"><span>Receiving JSON Data</span></a></h2><p>To accept a JSON body in a request and deserialize it into a strongly-typed entity, use the <a href="https://docs.rs/volga/latest/volga/http/endpoints/args/json/struct.Json.html" target="_blank" rel="noopener noreferrer"><code>Json&lt;T&gt;</code></a> struct. Where <code>T</code> should be a deserializable struct, so ensure it derives from <a href="https://docs.rs/serde/latest/serde/trait.Deserialize.html" target="_blank" rel="noopener noreferrer"><code>Deserialize</code></a> from <a href="https://crates.io/crates/serde" target="_blank" rel="noopener noreferrer">serde</a>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">Json</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Deserialize</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token attribute attr-name">#[derive(Deserialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">i32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// POST /hello</span></span>
<span class="line">    <span class="token comment">// { name: &quot;John&quot;, age: 35 }</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_post</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>user<span class="token punctuation">:</span> <span class="token class-name">Json</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello {}!&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To test this endpoint, you can use the <code>curl</code> command like this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&quot;http://127.0.0.1:7878/hello&quot;</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;{ &quot;</span>name<span class="token string">&quot;: &quot;</span>John<span class="token string">&quot;, &quot;</span>age<span class="token string">&quot;: 35 }&quot;</span></span>
<span class="line">Hello John<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),n("div",d,[s[4]||(s[4]=n("p",{class:"hint-container-title"},"Tips",-1)),n("p",null,[s[1]||(s[1]=a("You can wrap your struct fields into ")),s[2]||(s[2]=n("a",{href:"https://doc.rust-lang.org/std/option/",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"Option<T>")],-1)),s[3]||(s[3]=a(" as similar as described for ")),l(p,{to:"/basics/query-params.html#handle-optional-params"},{default:c(()=>s[0]||(s[0]=[a("Optional Query Params")])),_:1,__:[0]})])]),s[6]||(s[6]=e(`<h2 id="sending-json-responses" tabindex="-1"><a class="header-anchor" href="#sending-json-responses"><span>Sending JSON Responses</span></a></h2><p>To send responses as JSON, Volga provides a couple of convenient methods:</p><h3 id="using-results-from" tabindex="-1"><a class="header-anchor" href="#using-results-from"><span>Using <code>Results::from()</code></span></a></h3><p>The <a href="https://docs.rs/volga/latest/volga/http/response/struct.Results.html#method.from" target="_blank" rel="noopener noreferrer"><code>Results::from()</code></a> method can be used, which has been described earlier, and the struct instance passed will be automatically serialized to JSON.</p><h3 id="using-results-json" tabindex="-1"><a class="header-anchor" href="#using-results-json"><span>Using <code>Results::json()</code></span></a></h3><p>The <a href="https://docs.rs/volga/latest/volga/http/response/struct.Results.html#method.json" target="_blank" rel="noopener noreferrer"><code>Results::json()</code></a> method directly serializes Rust structs into JSON output. Ensure your struct implements <a href="https://docs.rs/serde/latest/serde/trait.Serialize.html" target="_blank" rel="noopener noreferrer"><code>Serialize</code></a>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">Results</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Serialize</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token attribute attr-name">#[derive(Serialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">i32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            age<span class="token punctuation">:</span> <span class="token number">35</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Results</span><span class="token punctuation">::</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To see the JSON response in action:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">&gt;</span> <span class="token function">curl</span> http://127.0.0.1:7878/hello</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;John&quot;</span>,<span class="token string">&quot;age&quot;</span>:35<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="simplified-version-with-ok-macro" tabindex="-1"><a class="header-anchor" href="#simplified-version-with-ok-macro"><span>Simplified Version with <code>ok!</code> Macro</span></a></h3><p>For a more streamlined approach, the <a href="https://docs.rs/volga/latest/volga/macro.ok.html" target="_blank" rel="noopener noreferrer"><code>ok!</code></a> macro automatically compiles into <a href="https://docs.rs/volga/latest/volga/http/response/struct.Results.html#method.json" target="_blank" rel="noopener noreferrer"><code>Results::json()</code></a> under the hood when passing a serializable object:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Serialize</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token attribute attr-name">#[derive(Serialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">i32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            age<span class="token punctuation">:</span> <span class="token number">35</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Moreover, with the <a href="https://docs.rs/volga/latest/volga/macro.ok.html" target="_blank" rel="noopener noreferrer"><code>ok!</code></a> macro you can also use the untyped JSON:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">35</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-status-with-json" tabindex="-1"><a class="header-anchor" href="#using-status-with-json"><span>Using Status with JSON</span></a></h3><p>You can also include HTTP status codes in your JSON responses using the <a href="https://docs.rs/volga/latest/volga/macro.status.html" target="_blank" rel="noopener noreferrer"><code>status!</code></a> macro:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> status<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">serde<span class="token punctuation">::</span></span><span class="token class-name">Serialize</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token attribute attr-name">#[derive(Serialize)]</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token keyword">i32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> user<span class="token punctuation">:</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            age<span class="token punctuation">:</span> <span class="token number">35</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token macro property">status!</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The JSON body can be coupled with standard HTTP statuses such as <code>200</code>, <code>400</code>, <code>401</code>, <code>403</code> and others to provide clear client-side messages.</p><p>Here is the <a href="https://github.com/RomanEmreis/volga/blob/main/examples/json/src/main.rs" target="_blank" rel="noopener noreferrer">full example</a></p>`,19))])}const b=t(r,[["render",m]]),h=JSON.parse('{"path":"/data/json-payload.html","title":"Handling JSON","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"r.emreis@outloo.com","commits":17},{"name":"RomanEmreis","username":"RomanEmreis","email":"39233213+RomanEmreis@users.noreply.github.com","commits":4,"url":"https://github.com/RomanEmreis"}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"719b6efa42303ef55a2a74dafe505a03fc71ac3e","time":1740081883000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"5d6cdc2c818f56d2f0f360e08643446a9e8c2e1f","time":1736868027000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"f0a26f29858451307785105c897483568f99fc00","time":1734955827000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"c103c93458ddf9a62b8b085ade6d01e097179d4d","time":1733565170000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"several fixes"},{"hash":"7bc096450d407e75e9d961cc576e686eb5c23eb2","time":1733507356000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update json-payload.md"},{"hash":"a44e23ce545d4453147935818ef67beaf4a90531","time":1733501332000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new docs site"},{"hash":"f7b99f9f4d378ce79ae15accc2e14dd549cb8c6b","time":1732360723000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"ce8a97a75692f13053a293d7a4cac093ecc90322","time":1731924786000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"small fixes"},{"hash":"cc3d5a5b64e130f6529221219529324fed91160e","time":1731923958000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"261e33888697e88fb1c089046a75c23d01cc5db5","time":1730539585000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"4cc2f453c5d8941dea9f5e7abb0b7154bf97e3e6","time":1730450960000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"doc updates"},{"hash":"3990c8de3d3b7e50f710202586cadb9310cd233c","time":1730390213000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"b480008a730d0424109908ff79bd425c5e2eae8f","time":1730024614000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"54be84a8457efb04dc10610504f72df39adf7b8c","time":1728770985000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update json-payload.md"},{"hash":"97cb535bfc51439755859f962a6f9b0a8ada0240","time":1728770943000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update json-payload.md"},{"hash":"6c9d33393fb02e45b8732a053720cc350af3d5d9","time":1728663592000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"cd4747f8933cb0e6b5338227a1495caef02f2d16","time":1728315292000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"small adjustments"},{"hash":"f068acea62a0b56ede3308ba4527dc0af65bc923","time":1728312982000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"added json and middleware docs"},{"hash":"574a918a67f81749754c3ab0905a174bf7f5e91a","time":1728205697000,"email":"r.emreis@outloo.com","author":"Roman Emreis","message":"Initial commit"}]},"filePathRelative":"data/json-payload.md"}');export{b as comp,h as data};
