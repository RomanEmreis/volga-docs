import{_ as s,c as a,a as e,o as t}from"./app-58ZWfUWR.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="global-error-handling" tabindex="-1"><a class="header-anchor" href="#global-error-handling"><span>Global Error Handling</span></a></h1><p>Volga provides a global error handling mechanism that catches all <a href="https://doc.rust-lang.org/std/error/trait.Error.html" target="_blank" rel="noopener noreferrer"><code>Errors</code></a> that may occur in request handlers and middleware. This can be easily achieved using the <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.map_err" target="_blank" rel="noopener noreferrer"><code>map_err</code></a> method of the <a href="https://docs.rs/volga/latest/volga/app/struct.App.html" target="_blank" rel="noopener noreferrer"><code>App</code></a> to register a function that handles errors.</p><p>The function receives an <a href="https://docs.rs/volga/latest/volga/error/struct.Error.html" target="_blank" rel="noopener noreferrer"><code>Error</code></a> object and should return a response that implements the <a href="https://docs.rs/volga/latest/volga/http/response/into_response/trait.IntoResponse.html" target="_blank" rel="noopener noreferrer"><code>IntoResponse</code></a> trait.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example:</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">,</span> status<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/error&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">IoError</span><span class="token punctuation">::</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token string">&quot;some error&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Enabling global error handler</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">status!</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we intentionally create a request handler that produces an error and define an error handler that generates an HTTP response with a <code>500</code> status code based on the error message.</p><p>For convenience, the <a href="https://docs.rs/volga/latest/volga/error/struct.Error.html" target="_blank" rel="noopener noreferrer"><code>Error</code></a> struct includes a <code>status</code> field that covers common cases (400, 401, 403, 404, etc.), allowing the macro usage to be updated as follows:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token macro property">status!</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">as_u16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In fact, this is how the default error handler is implemented. If we remove the <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.map_err" target="_blank" rel="noopener noreferrer"><code>map_err</code></a> method, the response remains unchanged. However, defining a custom error handler offers greater flexibility for advanced logging and tracing.</p><h2 id="problem-details" tabindex="-1"><a class="header-anchor" href="#problem-details"><span>Problem Details</span></a></h2><p>Volga fully supports the <a href="https://www.rfc-editor.org/rfc/rfc9457" target="_blank" rel="noopener noreferrer">Problem Details</a> format, which provides machine-readable error details in HTTP responses. This eliminates the need to define custom error formats for HTTP APIs.</p><p>To enable this functionality, ensure that the <code>problem-details</code> feature is activated in your app&#39;s <code>Cargo.toml</code>:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.5.0&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;problem-details&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, you can combine the <a href="https://docs.rs/volga/latest/volga/macro.problem.html" target="_blank" rel="noopener noreferrer"><code>problem!</code></a> macro with <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.map_err" target="_blank" rel="noopener noreferrer"><code>map_err</code></a>:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">,</span> problem<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/error&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">IoError</span><span class="token punctuation">::</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token string">&quot;some error&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Enabling global error handler</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>status<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">into_parts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token macro property">problem!</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> status<span class="token punctuation">.</span><span class="token function">as_u16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;instance&quot;</span><span class="token punctuation">:</span> instance</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-response" tabindex="-1"><a class="header-anchor" href="#example-response"><span>Example Response:</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line">HTTP/<span class="token number">1.1</span> <span class="token number">500</span> Internal Server Error</span>
<span class="line">Content-Type<span class="token operator">:</span> application/problem+json</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://tools.ietf.org/html/rfc9110#section-15.6.1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;detail&quot;</span><span class="token operator">:</span> <span class="token string">&quot;some error&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;instance&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/error&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>type</code> and <code>title</code> fields are inferred from the status code but can be overridden:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token macro property">problem!</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://tools.ietf.org/html/rfc9110#section-15.6.1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Server Error&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> status<span class="token punctuation">.</span><span class="token function">as_u16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;instance&quot;</span><span class="token punctuation">:</span> instance</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Additionally, you can include extra details if needed:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token macro property">problem!</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://tools.ietf.org/html/rfc9110#section-15.5.1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bad Request&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;details&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Your request parameters didn&#39;t validate.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;instance&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;/some/resource/path&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;invalid-params&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reason&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Must be a positive integer&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For a complete example, see the full implementation <a href="https://github.com/RomanEmreis/volga/blob/main/examples/global_error_handler/src/main.rs" target="_blank" rel="noopener noreferrer">here</a>.</p>`,22)]))}const i=s(p,[["render",o]]),r=JSON.parse('{"path":"/advanced/errors.html","title":"Global Error Handling","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"Roman_Emreis@epam.com","commits":3}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"590c63e2d69004cdcaebbdeb6f7cabd584692c1e","time":1738600433000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"}]},"filePathRelative":"advanced/errors.md"}');export{i as comp,r as data};
