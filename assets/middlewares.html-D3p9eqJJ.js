import{_ as s,c as a,a as e,o as t}from"./app-58ZWfUWR.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="custom-middleware" tabindex="-1"><a class="header-anchor" href="#custom-middleware"><span>Custom Middleware</span></a></h1><p>Volga framework features a flexible middleware pipeline that allows you to process and modify HTTP requests and responses sequentially through middleware functions before reaching the final request handler.</p><h2 id="overview-of-middleware-behavior" tabindex="-1"><a class="header-anchor" href="#overview-of-middleware-behavior"><span>Overview of Middleware Behavior</span></a></h2><p>Each middleware function in the pipeline must explicitly call a <a href="https://docs.rs/volga/latest/volga/middleware/type.NextFn.html" target="_blank" rel="noopener noreferrer"><code>next</code></a> closure to pass control to the next middleware or the request handler. Failing to invoke <a href="https://docs.rs/volga/latest/volga/middleware/type.NextFn.html" target="_blank" rel="noopener noreferrer"><code>next</code></a> results in shortcutting the rest of the pipeline, which can be useful for handling specific conditions before reaching further processing stages.</p><p>Having the ability to call the <a href="https://docs.rs/volga/latest/volga/middleware/type.NextFn.html" target="_blank" rel="noopener noreferrer"><code>next</code></a> closure gives you extensive control over the execution flow, enabling you to run code before or after subsequent middleware functions or the request handler.</p><h2 id="configuring-middleware" tabindex="-1"><a class="header-anchor" href="#configuring-middleware"><span>Configuring Middleware</span></a></h2><p>First of all, if you&#39;re not using the <code>full</code> features, you need to enable the <code>middleware</code> feature in your <code>Cargo.toml</code></p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">volga</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.6.0&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;middleware&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-sequential-middleware-execution" tabindex="-1"><a class="header-anchor" href="#example-sequential-middleware-execution"><span>Example: Sequential Middleware Execution</span></a></h3><p>Hereâ€™s a practical example of how to configure sequential middleware in Volga:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Configure the server</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Middleware 1</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>context<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Something can be done before the middleware 2</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Before Middleware 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Something can be done after the middleware 2 is completed</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;After Middleware 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        response</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Middleware 2</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>next<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Something can be done before the request handler</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Before Request Handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> response <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Something can be done after the request handler is completed</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;After Request Handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        response</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Example of request handler</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Run the server</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-middleware-short-cutting-pipeline" tabindex="-1"><a class="header-anchor" href="#example-middleware-short-cutting-pipeline"><span>Example: Middleware Short-Cutting Pipeline</span></a></h3><p>The following example demonstrates how to shortcut the middleware pipeline to prevent the request handler from being executed. This approach can be particularly useful for implementing authorization filters or pre-request validations that may terminate the request early:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code class="language-rust"><span class="line"><span class="token keyword">use</span> <span class="token namespace">volga<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">App</span><span class="token punctuation">,</span> ok<span class="token punctuation">,</span> status<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute attr-name">#[tokio::main]</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Configure the server</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Middleware 1</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>context<span class="token punctuation">,</span> next<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Something can be done before the middleware 2</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Processed by Middleware 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Something can be done after the middleware 2 is completed</span></span>
<span class="line">        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Back in Middleware 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        response</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Middleware 2</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Directly returns without calling &#39;next&#39;, shortcutting the pipeline</span></span>
<span class="line">        <span class="token macro property">status!</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Example of asynchronous request handler</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">map_get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// This will never executed</span></span>
<span class="line">        <span class="token macro property">ok!</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Run the server</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wrap-vs-with" tabindex="-1"><a class="header-anchor" href="#wrap-vs-with"><span>.wrap() vs .with()</span></a></h2><p>As you may have noticed, there are two similar methods for configuring the middleware pipeline. The <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.wrap" target="_blank" rel="noopener noreferrer"><code>wrap()</code></a> method offers lower-level access and provides full control over the entire <a href="https://docs.rs/volga/latest/volga/http/request/struct.HttpRequest.html" target="_blank" rel="noopener noreferrer"><code>HttpRequest</code></a>, including the <a href="https://docs.rs/volga/latest/volga/http/body/struct.HttpBody.html" target="_blank" rel="noopener noreferrer"><code>HttpBody</code></a>. This makes it ideal for advanced use cases such as compression, decompression, encoding, or decoding. In contrast, the <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.with" target="_blank" rel="noopener noreferrer"><code>with()</code></a> method is designed for convenience and covers around 80% of typical scenarios. It offers flexible access to dependency injection, <a href="https://docs.rs/volga/latest/volga/headers/header/struct.HttpHeaders.html" target="_blank" rel="noopener noreferrer"><code>HttpHeaders</code></a>, and other request metadata, but does not expose the request body.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>As a general rule, prefer <a href="https://docs.rs/volga/latest/volga/app/struct.App.html#method.with" target="_blank" rel="noopener noreferrer"><code>with()</code></a> unless your use case specifically requires access to the request body.</p></div><p>Here is the <a href="https://github.com/RomanEmreis/volga/blob/main/examples/middleware/src/main.rs" target="_blank" rel="noopener noreferrer">full example</a>.</p>`,18)]))}const i=s(p,[["render",o]]),r=JSON.parse('{"path":"/advanced/middlewares.html","title":"Custom Middleware","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753605804000,"contributors":[{"name":"Roman Emreis","username":"","email":"r.emreis@outloo.com","commits":15},{"name":"RomanEmreis","username":"RomanEmreis","email":"39233213+RomanEmreis@users.noreply.github.com","commits":2,"url":"https://github.com/RomanEmreis"}],"changelog":[{"hash":"446f2cb336c3db45ba44b4f07f646b570e054215","time":1753605804000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"9d57000ef760bc767e6edc5e323a20ef0bbac747","time":1752418393000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"fixed links"},{"hash":"c8872282682c0253111255ea1f5546f8b6d372a5","time":1752418092000,"email":"r.emreis@outlook.com","author":"Roman Emreis","message":"new release"},{"hash":"d7d673fca21757efa0a4659c63884168bfe315fe","time":1738859397000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"5d6cdc2c818f56d2f0f360e08643446a9e8c2e1f","time":1736868027000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"f0a26f29858451307785105c897483568f99fc00","time":1734955827000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"a44e23ce545d4453147935818ef67beaf4a90531","time":1733501332000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new docs site"},{"hash":"f7b99f9f4d378ce79ae15accc2e14dd549cb8c6b","time":1732360723000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"261e33888697e88fb1c089046a75c23d01cc5db5","time":1730539585000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"3990c8de3d3b7e50f710202586cadb9310cd233c","time":1730390213000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"b480008a730d0424109908ff79bd425c5e2eae8f","time":1730024614000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"afe88c9e225a44ce52c37b9f54c47f7404dcbc26","time":1728771173000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update middlewares.md"},{"hash":"bcb1083038196dcbcb1a79151b8fd3587dd99773","time":1728771116000,"email":"39233213+RomanEmreis@users.noreply.github.com","author":"Roman","message":"Update middlewares.md"},{"hash":"6c9d33393fb02e45b8732a053720cc350af3d5d9","time":1728663592000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"new release"},{"hash":"12ee2d15ebbd90a6610c90e970c8819981bc28a3","time":1728313206000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"small update"},{"hash":"f068acea62a0b56ede3308ba4527dc0af65bc923","time":1728312982000,"email":"Roman_Emreis@epam.com","author":"Roman Emreis","message":"added json and middleware docs"},{"hash":"574a918a67f81749754c3ab0905a174bf7f5e91a","time":1728205697000,"email":"r.emreis@outloo.com","author":"Roman Emreis","message":"Initial commit"}]},"filePathRelative":"advanced/middlewares.md"}');export{i as comp,r as data};
